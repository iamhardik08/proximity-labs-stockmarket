{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","WebSocket","App","useState","stocks","setStocks","stockUpdates","setStockUpdates","getRowItemClass","status","useEffect","addEventListener","event","stockData","JSON","parse","data","newList","length","shift","stockObj","stock","stockName","stockPrice","hasOwnProperty","stockKey","stockStatus","className","stringify","Object","keys","map","key","toFixed","renderStockList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAEMA,G,MAAS,IAAIC,UAAU,6BA+FdC,MA9Ff,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAI2BF,mBAAS,IAJpC,mBAING,EAJM,KAIQC,EAJR,KAuDb,SAASC,EAAgBC,GACvB,MAAe,OAAXA,EACK,yBACa,SAAXA,EACF,uBAEA,cAgBX,OAvEAC,qBAAU,WACRV,EAAOW,iBAAiB,WAAW,SAAUC,GAC3C,IAAMC,EAAYC,KAAKC,MAAMH,EAAMI,MAC/BC,EAAY,sBAAOX,GAAP,CAAqBO,IACrCN,EAAgBU,QAGjB,IAGHP,qBAAU,WACR,GAAIJ,EAAaY,OAAQ,CACvB,IADuB,EACnBL,EAAiBP,EAAaa,QAC9BC,EAAa,eAAQhB,GAFF,cAGHS,GAHG,IAGvB,2BAA+B,CAAC,IAArBQ,EAAoB,QACzBC,EAAYD,EAAM,GAClBE,EAAaF,EAAM,GACvB,GAAID,EAASI,eAAeF,GAC1B,IAAK,IAAIG,KAAYL,EACfK,IAAaH,IACXF,EAASE,GAAWC,WAAaA,EACnCH,EAASE,GAAWI,YAAc,OAElCN,EAASE,GAAWI,YAAc,KAEpCN,EAASE,GAAWC,WAAaA,QAIrCH,EAASE,GAAa,CACpBC,aACAG,YAAa,OApBI,8BAwBvBrB,EAAUe,MAEX,CAACd,EAAcF,IAmChB,yBAAKuB,UAAU,OACb,yBAAKA,UAAU,QAEb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBAAf,WACA,yBAAKA,UAAU,gBAAf,SACA,yBAAKA,UAAU,gBAAf,iBAEF,yBAAKA,UAAU,YArBrB,WACE,IAAIP,EAAa,eAAQhB,GACzB,MAAkC,OAA3BU,KAAKc,UAAUxB,GAAmByB,OAAOC,KAAK1B,GAAQ2B,KAAI,SAACV,GAEhE,OAAO,yBAAKM,WAxBKlB,EAwBkBW,EAASC,GAAOK,YAvBtC,OAAXjB,EACK,sBACa,SAAXA,EACF,oBAEA,sBAkB0DuB,IAAKX,GACpE,yBAAKM,UAAU,eAAf,IAA+BN,EAA/B,KACA,yBAAKM,UAAWnB,EAAgBY,EAASC,GAAOK,cAAhD,gBAAqEN,EAASC,GAAOE,WAAWU,QAAQ,IAAxG,KACA,yBAAKN,UAAU,eAAf,IAA+BP,EAASC,GAAOK,YAA/C,MA3BN,IAAqBjB,KA6Bd,GAaEyB,OC9ESC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.88d8831b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nconst socket = new WebSocket('ws://stocks.mnet.website');\nfunction App() {\n\n  const [stocks, setStocks] = useState({});\n\n  const [stockUpdates, setStockUpdates] = useState([]);\n\n  useEffect(() => {\n    socket.addEventListener('message', function (event: any) {\n      const stockData = JSON.parse(event.data);\n      let newList: any = [...stockUpdates, stockData]\n      setStockUpdates(newList);\n\n    });\n  }, []);\n\n\n  useEffect(() => {\n    if (stockUpdates.length) {\n      let stockData: any = stockUpdates.shift();\n      let stockObj: any = { ...stocks }\n      for (const stock of stockData) {\n        let stockName = stock[0];\n        let stockPrice = stock[1];\n        if (stockObj.hasOwnProperty(stockName)) {\n          for (let stockKey in stockObj) {\n            if (stockKey === stockName) {\n              if (stockObj[stockName].stockPrice > stockPrice) {\n                stockObj[stockName].stockStatus = 'down';\n              } else {\n                stockObj[stockName].stockStatus = 'up';\n              }\n              stockObj[stockName].stockPrice = stockPrice;\n            }\n          }\n        } else {\n          stockObj[stockName] = {\n            stockPrice,\n            stockStatus: null,\n          }\n        }\n      }\n      setStocks(stockObj)\n    }\n  }, [stockUpdates, stocks]);\n\n  function getRowClass(status: string): string {\n    if (status === 'up') {\n      return \"GridRow GreenBorder\";\n    } else if (status === 'down') {\n      return \"GridRow RedBorder\";\n    } else {\n      return \"GridRow GrayBorder\";\n    }\n  }\n\n  function getRowItemClass(status: string): string {\n    if (status === 'up') {\n      return \"GridRowItem GreenColor\";\n    } else if (status === 'down') {\n      return \"GridRowItem RedColor\";\n    } else {\n      return \"GridRowItem\";\n    }\n  }\n\n  function renderStockList() {\n    let stockObj: any = { ...stocks }\n    return JSON.stringify(stocks) !== '{}' ? Object.keys(stocks).map((stock) => {\n\n      return <div className={getRowClass(stockObj[stock].stockStatus)} key={stock}>\n        <div className=\"GridRowItem\"> {stock} </div>\n        <div className={getRowItemClass(stockObj[stock].stockStatus)}> {`$ ${stockObj[stock].stockPrice.toFixed(2)}`} </div>\n        <div className=\"GridRowItem\"> {stockObj[stock].stockStatus} </div>\n      </div>\n    }) : []\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Grid\">\n\n        <div className=\"GridHead\">\n          <div className=\"GridHeadItem\">Company</div>\n          <div className=\"GridHeadItem\">Price</div>\n          <div className=\"GridHeadItem\">Stock Status</div>\n        </div>\n        <div className=\"GridBody\">\n          {renderStockList()}\n        </div>\n\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}